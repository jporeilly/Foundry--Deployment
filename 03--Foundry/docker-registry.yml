---
# Install Docker Registry
- name: install Docker
  hosts: "{{ groups['installer'][0] }}"
  become: true
  any_errors_fatal: true

  tasks:
    # Check to see if Docker is installed
    - name: Check If Docker Is Installed
      command: docker --version
      register: docker_valid
      ignore_errors: yes
      tags: 
       - info
    
    # Install the preferred Apt
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    # Required ackages
    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    # Add Docker GPG key
    - name: Add signing key
      apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present

    # Add Docker Repository
    - name: Add Repository into sources list
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    # Install Docker
    - name: Install Docker
      apt:
        name:
          - docker
          - docker.io
          - docker-compose
          - docker-registry
        state: latest
        update_cache: true

    # Python Docker module
    - name: Install Python Docker module
      pip:
       name: docker

    # Check Docker has started
    - name: Check docker is active
      service:
        name: docker
        state: started
        enabled: yes

    # Check for Docker group
    - name: Ensure group "docker" exists
      group:
        name: docker
        state: present

    # Add Installer to Dcoker group
    - name: Add "{{ ansible_user }}" to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Install Docker Compose
    - name: Install docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'

    # Take ownership
    - name: Change file ownership, group and permissions
      file:
        path: /usr/local/bin/docker-compose
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"



# This configures a self-signed private Docker Registry, i.e.  the cerificate to authorize users to access the Registry is self-signed. 
# Every Docker daemon needs to trust that certificate, so copied over to the Cluster Nodes.

- name: Configure Registry
  hosts: "{{ groups['installer'][0] }}"
  become: false
  gather_facts: true
    vars:
     certificate_dir: /etc/ssl/private
     server_hostname: "{{ groups['installer'][0] }}"
  tags: 
   - registry
  
  tasks:

  - name: Ensure directory exists for local self-signed TLS certs.
    file:
     path: "{{ certificate_dir }}/{{ server_hostname }}"
     state: directory
     mode: '0775'

  - name: Generate Private key
    openssl_privatekey:   
     path: "{{ certificate_dir }}/{{ server_hostname }}/registry.key"

  - name: Generate an OpenSSL CSR
    openssl_csr:
     path: "{{ certificate_dir }}/{{ server_hostname }}.csr"
     privatekey_path: "{{ certificate_dir }}/{{ server_hostname }}/registry.key"

  - name: Generate a Self Signed OpenSSL certificate
    openssl_certificate:
     path: "{{ certificate_dir }}/{{ server_hostname }}/registry.crt"
     privatekey_path: "{{ certificate_dir }}/{{ server_hostname }}/registry.key"
     csr_path: "{{ certificate_dir }}/{{ server_hostname }}/registry.csr"
     provider: selfsigned

  - name: Allow self-signed Registry
    shell: |
     sed -i "s! }!, \"insecure-registries\" : [\"{{ groups['installer'][0] }}:5000\"]}!1" /etc/docker/daemon.json

  - name: Create Docker-Registry directories    
    file:
     path: /installers/Docker-Registry/{{item}}
     state: directory    
     with_items:
        - 'data'      
        - 'certs'      











      - name: Build registry service
        docker_container:
          name: registry
          image: registry:2
          state: started
          detach: yes
          restart: yes
          restart_policy: unless-stopped
          #entrypoint: sleep 3000
          ports:
          - "5000:5000"
          volumes:
          - "/home/{{ local_user }}/certs:/certs"
          env:
              REGISTRY_HTTP_ADDR: "0.0.0.0:5000"
              REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/domain.crt"
              REGISTRY_HTTP_TLS_KEY: "/certs/domain.key"       

      # Perform manually as this restarts the running docker process on the installer node
      - name: Restart docker for registry
        shell: systemctl restart docker
        become: true

      - name: Check registry change
        shell: |
          docker info | grep -i -a1 Insecure 
        register: docker_insecure
        failed_when: '"{{ groups[''installer''][0] }}" not in docker_insecure.stdout'
      when: '"{{ registry_domain }}" == "{{ groups[''installer''][0] }}"'

# Enable Cluster Nodes to access the Registry with certificate
- name: Access Docker Registry
  hosts: "{{ groups['kube-node']}}"
  become: true
  become_method: sudo
  become_user: root
  gather_facts: true
  any_errors_fatal: true
  tags: 
   - never
   - continue


  tasks:
    - block:
      - name: Create Docker cert directory on cluster
        shell: "mkdir -p /etc/docker/certs.d/{{ groups['installer'][0] }}:5000"

      - name: Set ownership of cluster Docker cert directory to 'installer'
        shell: "chown -R {{ ansible_user }}:{{ ansible_user }} /etc/docker/certs.d/{{ groups['installer'][0] }}:5000"
      when: '"{{ registry_domain }}" == "{{ groups[''installer''][0] }}"'

- name: Copy Docker cert from installer node to cluster
  become: false
  gather_facts: false
  hosts:  "{{ groups['kube-node'] }}" 
  any_errors_fatal: true
  tags: 
   - never
   - continue
  # Only when the Registry is installed on the installer node.
  # Otherwise, its assumed the registry is external and already defined.

  tasks:
    - block:
      #    
      - name: Write the clusters host key to known hosts
        connection: local
        shell: "ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts"

      - name: Transfer file from installer to cluster
        shell: scp -i {{ ansible_ssh_private_key_file }} /home/{{ local_user }}/certs/domain.crt {{ansible_user }}@{{ inventory_hostname }}:/etc/docker/certs.d/{{ groups['installer'][0] }}:5000
        delegate_to: "{{ groups['installer'][0] }}"
      
      - name: Verify new cert directory on cluster
        shell: | 
          cd /etc/docker/certs.d/{{ groups['installer'][0] }}:5000;
          pwd;
          ls -l;
        register: cert_path

      - name: Show filepath for new docker cert
        debug:
          msg: "{{ cert_path.stdout_lines }}"
      when: '"{{ registry_domain }}" == "{{ groups[''installer''][0] }}"'    